import random

suits = ("Hearts","Diamonds","Spades","Clubs")
ranks = ("Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King", "Ace")
values = {"Two": 2,"Three": 3,"Four": 4,"Five": 5,"Six": 6,"Seven": 7,"Eight": 8,"Nine": 9,
          "Ten": 10,"Jack": 10,"Queen": 10,"King": 10,"Ace": 11}

class Card:
    
    def __init__(self,rank,suit):
        
        self.rank = rank
        self.suit = suit
        self.value = values[rank]
        
    def __str__(self):
        return f'{self.rank} of {self.suit}'

class Deck:
    
    def __init__(self):
        
        self.all_cards = []
        
        for suit in suits:
            for rank in ranks:
                created_card = Card(rank,suit)
                self.all_cards.append(created_card)
        
    def shuffle(self):
        
        random.shuffle(self.all_cards)
        
    def deal_one(self):
        return self.all_cards.pop(0)

class Player:
    
    def __init__(self,name):
        
        self.name = name
        self.value = 0
        self.aces = 0
        self.player_cards = []
    
    def add_cards(self,new_cards):
        self.player_cards.append(new_cards)
        self.value += values[new_cards.rank]
        if new_cards.rank == "Ace":
            self.aces += 1
        
    def adjust_for_ace(self):
        while self.value > 21 and self.aces:
            self.value -= 10
            self.aces -= 1

    def print_value(self):
        print(f'{self.name} value is: {self.value}')
        
    def __str__(self):
        return (f'{self.name} has {len(self.player_cards)} cards')      

class Bank:
    
    def __init__(self,balance=0):
        self.balance = balance
        
    def bet(self,bet_amount):
        print (f'You have bet {bet_amount}')
        self.balance = self.balance - bet_amount

    def win_bet(self,bet_amount):
        self.balance = self.balance + bet_amount*2
    
    def bet_input(self):

        check = True

        while check:

            bet_amount = input("How much do you want to bet? ")

            if not bet_amount.isdigit():
                print("Please select an integer")
                continue
            elif int(bet_amount) > self.balance:
                print("You do not have enough funds")
                print(f'Your balance is {self.balance}')
                continue
            else:
                check = False

        return int(bet_amount)
    
    def __str__(self):
        
        return f'Your balance is {self.balance}'

chips = 1000
balance = Bank(chips)
print(balance)

bet_amount = balance.bet_input()
print(bet_amount)
balance.bet(bet_amount)
print(balance)

def hit():
    
    hit_check = []
    
    while hit_check not in ["H","S"]:
        
        hit_check = input("Player do you want to Hit or Stand? Select H for hit or S for Stand ").upper()
                          
        if hit_check not in ["H","S"]:
            print("Please select either H or S")
            continue
        elif hit_check in ["H"]:            
            Hit = True
        else:
            Hit = False
    
    return Hit

def twenty_one_check(value):
    if value >= 21:
        if value == 21:
            print("Player Wins!")
            return True
        else:
            print("BUST!")
            return True

def win_check():
    if player_value == 21:
        balance.win_bet(player_bet)
        print(balance)
    elif player_value > 21:
        print(balance)
    elif dealer_value > 21:
        balance.win_bet(player_bet)
        print(balance)
    elif player_value > dealer_value:
        balance.win_bet(player_bet)
        print(balance)
    else:
        print(balance)

def play_again():
    
    play_again = []
    
    while play_again not in ["Y","N"]:
        
        play_again = input("Do you want to play again? Select Y or N: ").upper()

        if play_again not in ["Y","N"]:
            print("Please select either Y or N")
            continue
        elif play_again in ["Y"]:            
            game_on = True
        else:
            print("Thank you for playing!")
            game_on = False
    
    return game_on

import random
from IPython.display import clear_output
    
game_on = True
chips = 1000
balance = Bank(chips)

while game_on:
    
    player = Player('player')
    house = Player('house')

    new_deck = Deck()
    new_deck.shuffle()

    for x in range(2):
        player.add_cards(new_deck.deal_one())
        house.add_cards(new_deck.deal_one())
    
    #Player makes bet
    player_bet = balance.bet_input()
    balance.bet(player_bet)
    print(balance)
    
    #show cards
    player.adjust_for_ace()
    print(f'Dealer card: {str(house.player_cards[0])}')
    print(f'Player cards: {[str(i) for i in player.player_cards]}') # could have used for loop to print cards in a list. Solutions uses asterisk method
    player.print_value()
    player_value = player.value
      
    # Player turn to hit including checks for win or bust after each hit
    player_turn = True
    while player_turn:
        if twenty_one_check(player_value):
            player_turn = False
        else:
            Hit = hit()
            if Hit == True:
                player.add_cards(new_deck.deal_one())
                player.adjust_for_ace()
                player_value = player.value
                print(f'Dealer card: {house.player_cards[0]}')
                print(f'Player cards: {[str(i) for i in player.player_cards]}')
                print(f'Player current value is: {player_value}')
            else:
                break
    
    # Dealers turn
    if player_turn == False:
        dealer_turn = False
    else:
        dealer_turn = True
    
    while dealer_turn:
        house.adjust_for_ace()
        print(f'Dealer cards: {[str(i) for i in house.player_cards]}')
        dealer_value = house.value
        house.print_value()
        if dealer_value > player_value:
            if dealer_value > 21:
                print("BUST! Player wins!")
                dealer_turn = False
            else:
                print("Player Loses!")
                dealer_turn = False
        else:
            house.add_cards(new_deck.deal_one())
            house.adjust_for_ace()
            
    win_check()
    game_on = play_again()
    clear_output()
